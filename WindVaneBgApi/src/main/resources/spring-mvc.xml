<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd
	http://www.springframework.org/schema/mvc 
	http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	<!-- 访问静态资源 -->
	<!--<mvc:default-servlet-handler />-->
	<!-- 注解探测器 -->
	<context:annotation-config />
	<!-- 自动扫描注解 -->
	<context:component-scan base-package="dianfan.controller">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:component-scan base-package="dianfan.exception">
		<!--控制器增强，使一个Contoller成为全局的异常处理类，类中用@ExceptionHandler方法注解的方法可以处理所有Controller发生的异常 -->
		<context:include-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>
	<!-- 配置注解驱动 -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="customObjectConverter" />
			<ref bean="stringHttpMessageConverter" />
			<ref bean="fastJsonHttpMessageConverter" />
			<ref bean="marshallingHttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 自定义转换器 -->
	<bean
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"
		id="customObjectConverter">
		<property name="objectMapper">
			<bean class="dianfan.converters.CustomObjectMapper" />
		</property>
	</bean>
	<!-- 字符串避免出现乱码 -->
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<constructor-arg value="UTF-8" index="0"></constructor-arg>
		<!-- 避免出现乱码 -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 配置fastjson中实现HttpMessageConverter接口的转换器 -->
	<bean id="fastJsonHttpMessageConverter"
		class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
		<!-- 加入支持的媒体类型：返回contentType -->
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<!-- 避免IE出现下载JSON文件的情况 -->
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!--使用 Spring 的 marshaller/un-marshaller 读取/编写 XML 数据。它转换媒体类型为 application/xml 
		的数据。 -->
	<bean id="marshallingHttpMessageConverter"
		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
		<!-- 加入支持的媒体类型：返回contentType -->
		<property name="supportedMediaTypes">
			<list>
				<value>text/xml;charset=UTF-8</value>
				<value>application/xml;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />

	<!-- cors 跨域请求 -->
	<mvc:cors>
		<mvc:mapping path="/**" />
	</mvc:cors>

	<mvc:interceptors>
		<mvc:interceptor>
			<!-- /**表示所有url包括子url路径 -->
			<mvc:mapping path="/**" />
			<bean class="dianfan.interceptor.TokenAuthInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 支持上传文件 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 文件最大大小  -->
		<property name="maxUploadSize" value="104857600" />
		<!--单个文件最大大小  -->
		<property name="maxUploadSizePerFile" value="104857600" />
		<!--小于40k将不产生临时文件 -->
		<property name="maxInMemorySize" value="40960" />
		<!--编码方式  -->
		<property name="defaultEncoding" value="utf-8" />
	</bean>

	<!-- 将自定义的swagger配置类加载到spring容器 -->
	<bean class="dianfan.plugin.RestApiConfig" />

	<!-- 扫描log切面 -->
	<context:component-scan base-package="dianfan.aspect" />

	<!-- aop强制cglib代理 -->
	<aop:aspectj-autoproxy proxy-target-class="true" />
	
	<!-- ehcache导入  -->
	<import resource="spring-ehcache.xml"/>
</beans>